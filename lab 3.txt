	Classes
1:class StringOps:
    def __init__(self):
        self.str = ""

    def getString(self):
        self.str = input("Enter a string: ")

    def printString(self):
        print(self.str.upper())

# Example
string_ops = StringOps()
string_ops.getString()
string_ops.printString()
2:class Shape:
    def __init__(self):
        pass

    def area(self):
        return 0

class Square(Shape):
    def __init__(self, length):
        self.length = length

    def area(self):
        return self.length * self.length

square = Square(5)
print("Area of the square:", square.area())

3:class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

rectangle = Rectangle(4, 6)
print("Area of the rectangle:", rectangle.area())

4:import math

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def show(self):
        print(f"({self.x}, {self.y})")

    def move(self, x, y):
        self.x += x
        self.y += y

    def dist(self, other_point):
        return math.sqrt((self.x - other_point.x)**2 + (self.y - other_point.y)**2)
p1 = Point(3, 4)
p2 = Point(6, 8)

p1.show()
p2.show()

print("Distance between two points:", p1.dist(p2))
5:class BankAccount:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited ${amount}. New balance: ${self.balance}")

    def withdraw(self, amount):
        if amount > self.balance:
            print(f"Withdrawal failed. Available balance: ${self.balance}")
        else:
            self.balance -= amount
            print(f"Withdrew ${amount}. New balance: ${self.balance}")


account = BankAccount("Daniyar Dautbaev", 1000)

account.deposit(500)
account.withdraw(1500)
account.withdraw(500)

6:def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, number):
        if number % i == 0:
            return False
    return True

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

prime_numbers = list(filter(lambda x: is_prime(x), numbers))

print("Prime numbers in the list:", prime_numbers)



Functions:
1:def getOun(gramm):
    return gramm * 28.3495231

print(getOun(100))

2:fahrenheit = float(input("Enter temperature in Fahrenheit: "))

centigrade = (5 / 9) * (fahrenheit - 32)

print(f"Temperature in Centigrade: {centigrade}")

3:
3:def solve(numheads, numlegs):
    for num_chickens in range(numheads + 1):
        num_rabbits = numheads - num_chickens
        if (2 * num_chickens) + (4 * num_rabbits) == numlegs:
            return (num_chickens, num_rabbits)
    return None
numheads = 35
numlegs = 94
result = solve(numheads, numlegs)
if result:
    print(f"There are {result[0]} chickens and {result[1]} rabbits in the farm.")
else:
    print("No solution found.")

4:def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, number):
        if number % i == 0:
            return False
    return True

def filter_primes(numbers):
    return list(filter(lambda x: is_prime(x), numbers))

numbers = list(map(int, input("Enter numbers separated by spaces: ").split()))

prime_numbers = filter_primes(numbers)

print("Prime numbers:", prime_numbers)
5:import itertools

def print_permutations(string):
    permutations = list(itertools.permutations(string))
    for permutation in permutations:
        print(''.join(permutation))

string = input("Enter a string: ")
print("All permutations:")
print_permutations(string)
6:def reverse_sentence(sentence):
    words = sentence.split()
    return " ".join(reversed(words))
sentence = "We "# eW
print("Reversed sentence:", reverse_sentence(sentence))

7:def has_33(nums):
    for i in range(len(nums) - 1):
        if nums[i] == 3 and nums[i + 1] == 3:
            return True
    return False
8: def spy_game(nums):
    code = [0,0,7,'x']
    for num in nums:
        if num == code[0]:
            code.pop(0)
    return len(code) == 1
9:import math

def sphere_volume(radius):
    volume = (4/3) * math.pi * (radius**3)
    return volume
10: def unique_list(lst):
    unique = []
    for item in lst:
        if item not in unique:
            unique.append(item)
    return unique	
11:def is_palidrome(word):
    if word==word[::-1]:
        return True
    else:
        return False
print(is_palidrome("word"))
12:def histogram(numbers):
    for number in numbers:
        print("*" * number)
histogram([4,5,6])
13:import random

def guess_number_game():
    name = input("Hello! What is your name?\n")
    print(f"Well, {name}, I am thinking of a number between 1 and 20.")
    secret_number = random.randint(1, 20)
    attempts = 0

    while True:
        guess = int(input("Take a guess.\n"))
        attempts += 1
        if guess == secret_number:
            print(f"Good job, {name}! You guessed my number in {attempts} guesses!")
            break
        elif guess < secret_number:
            print("Your guess is too low.")
        else:
            print("Your guess is too high.")

if __name__ == "__main__":
    guess_number_game()
14:from guess_number_game import guess_number_game

if __name__ == "__main__":
    guess_number_game()

Function2:
Function 2:
1:def is_above_threshold(movie):
    return movie['imdb'] > 5.5
2:def get_movies_above_threshold(movies):
    return [movie for movie in movies if is_above_threshold(movie)]
3:def get_movies_by_category(movies, category):
    return [movie for movie in movies if movie['category'] == category]
4:def average_imdb_score(movies):
    total_imdb_score = sum(movie['imdb'] for movie in movies)
    return total_imdb_score / len(movies)
5:def average_category_imdb_score(movies, category):
    movies_in_category = get_movies_by_category(movies, category)
    return average_imdb_score(movies_in_category)
