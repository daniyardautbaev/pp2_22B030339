	Lab 3
Classes:1 
class StringOps:
    def __init__(self):
        self.s = ""

    def getString(self):
        self.s = input("Enter a string: ")

    def printString(self):
        print(self.s.upper())
2 class Shape:
    def __init__(self):
        pass

    def area(self):
        return 0

class Square(Shape):
    def __init__(self, length):
        self.length = length

    def area(self):
        return self.length * self.length
3 class Shape:
    def __init__(self):
        pass

    def area(self):
        return 0

class Square(Shape):
    def __init__(self, length):
        self.length = length

    def area(self):
        return self.length * self.length

class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

4 import math

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def show(self):
        print(f"Point({self.x}, {self.y})")

    def move(self, x, y):
        self.x += x
        self.y += y

    def dist(self, other):
        return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)

5 class Account:
    def __init__(self, owner, balance):
        self.owner = owner
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print(f"{amount} has been deposited to the account.")

    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient balance.")
        else:
            self.balance -= amount
            print(f"{amount} has been withdrawn from the account.")

# creating an instance of the class
account = Account("John Doe", 100)

# making several deposits and withdrawals
account.deposit(50)
account.withdraw(150)
account.withdraw(25)
6 def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# using the filter function with a lambda function to find prime numbers
prime_numbers = list(filter(lambda x: is_prime(x), numbers))

print("Prime numbers:", prime_numbers)


Functions
1: def getOun(gramm):
    return gramm * 28.3495231

print(getOun(100))

2: def fahrenheit_to_centigrade(fahrenheit):
    return (5/9) * (fahrenheit - 32)

# read in the Fahrenheit temperature
fahrenheit = float(input("Enter the temperature in Fahrenheit: "))

# calculate the equivalent centigrade temperature
centigrade = fahrenheit_to_centigrade(fahrenheit)

# display the result
print(f"{fahrenheit}°F is equivalent to {centigrade}°C.")

3:def solve(numheads, numlegs):
    for num_chickens in range(numheads + 1):
        num_rabbits = numheads - num_chickens
        if (2 * num_chickens) + (4 * num_rabbits) == numlegs:
            return (num_chickens, num_rabbits)
    return None

# test the function
numheads = 35
numlegs = 94
result = solve(numheads, numlegs)
if result:
    print(f"There are {result[0]} chickens and {result[1]} rabbits in the farm.")
else:
    print("No solution found.")
4:def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def filter_prime(numbers):
    return [n for n in numbers if is_prime(n)]

# test the function
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
prime_numbers = filter_prime(numbers)
print("Prime numbers:", prime_numbers)

5: def permute(data, i, length):
    if i == length:
        print("".join(data))
    else:
        for j in range(i, length):
            data[i], data[j] = data[j], data[i]
            permute(data, i + 1, length)
            data[i], data[j] = data[j], data[i]

def permutations(string):
    n = len(string)
    data = list(string)
    permute(data, 0, n)

# test the function
string = "abc"
print("Permutations of", string, ":")
permutations(string)

6: def reverse_sentence(sentence):
    words = sentence.split()
    return " ".join(reversed(words))

# test the function
sentence = "We are ready"
print("Reversed sentence:", reverse_sentence(sentence))

7:def has_33(nums):
    for i in range(len(nums) - 1):
        if nums[i] == 3 and nums[i + 1] == 3:
            return True
    return False
8: def spy_game(nums):
    code = [0,0,7,'x']
    for num in nums:
        if num == code[0]:
            code.pop(0)
    return len(code) == 1
9:import math

def sphere_volume(radius):
    volume = (4/3) * math.pi * (radius**3)
    return volume
10: def unique_list(lst):
    unique = []
    for item in lst:
        if item not in unique:
            unique.append(item)
    return unique
11:def is_palidrome(word):
    if word==word[::-1]:
        return True
    else:
        return False
print(is_palidrome("word"))#false

12:def histogram(numbers):
    for number in numbers:
        print("*" * number)
histogram([4,5,6])
13:import random

def guess_number_game():
    name = input("Hello! What is your name?\n")
    print(f"Well, {name}, I am thinking of a number between 1 and 20.")
    secret_number = random.randint(1, 20)
    attempts = 0

    while True:
        guess = int(input("Take a guess.\n"))
        attempts += 1
        if guess == secret_number:
            print(f"Good job, {name}! You guessed my number in {attempts} guesses!")
            break
        elif guess < secret_number:
            print("Your guess is too low.")
        else:
            print("Your guess is too high.")

if __name__ == "__main__":
    guess_number_game()
14:from guess_number_game import guess_number_game

if __name__ == "__main__":
    guess_number_game()

Function 2:
1:def is_above_threshold(movie):
    return movie['imdb'] > 5.5
2:def get_movies_above_threshold(movies):
    return [movie for movie in movies if is_above_threshold(movie)]
3:def get_movies_by_category(movies, category):
    return [movie for movie in movies if movie['category'] == category]
4:def average_imdb_score(movies):
    total_imdb_score = sum(movie['imdb'] for movie in movies)
    return total_imdb_score / len(movies)
5:def average_category_imdb_score(movies, category):
    movies_in_category = get_movies_by_category(movies, category)
    return average_imdb_score(movies_in_category)


